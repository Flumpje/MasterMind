
mastermind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000007d2  00000866  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800108  00800108  0000086e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2c  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000816  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000570  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000520  00000000  00000000  00002943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_18>
  4c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 35       	cpi	r26, 0x52	; 82
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_3>:
	{
		t++;
	}
	str[t++] = '\n';
	str[t] = '\0';
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	83 e2       	ldi	r24, 0x23	; 35
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	23 e2       	ldi	r18, 0x23	; 35
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	20 62       	ori	r18, 0x20	; 32
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
  e4:	83 e2       	ldi	r24, 0x23	; 35
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	80 81       	ld	r24, Z
  ec:	88 23       	and	r24, r24
  ee:	14 f0       	brlt	.+4      	; 0xf4 <__vector_3+0x4e>
  f0:	0e 94 08 01 	call	0x210	; 0x210 <generateCode>
  f4:	00 00       	nop
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	7f 91       	pop	r23
 108:	6f 91       	pop	r22
 10a:	5f 91       	pop	r21
 10c:	4f 91       	pop	r20
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	00 d0       	rcall	.+0      	; 0x124 <main+0x6>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	87 e6       	ldi	r24, 0x67	; 103
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 41 01 	call	0x282	; 0x282 <InitUART>
 130:	84 e2       	ldi	r24, 0x24	; 36
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	24 e2       	ldi	r18, 0x24	; 36
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 62       	ori	r18, 0x20	; 32
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	85 e2       	ldi	r24, 0x25	; 37
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	25 e2       	ldi	r18, 0x25	; 37
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
 14e:	2f 7d       	andi	r18, 0xDF	; 223
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
 154:	8b e6       	ldi	r24, 0x6B	; 107
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2b e6       	ldi	r18, 0x6B	; 107
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	20 68       	ori	r18, 0x80	; 128
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
 166:	88 e6       	ldi	r24, 0x68	; 104
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	28 e6       	ldi	r18, 0x68	; 104
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	21 60       	ori	r18, 0x01	; 1
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	78 94       	sei
 17a:	84 e2       	ldi	r24, 0x24	; 36
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	24 e2       	ldi	r18, 0x24	; 36
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	28 60       	ori	r18, 0x08	; 8
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	84 e2       	ldi	r24, 0x24	; 36
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	24 e2       	ldi	r18, 0x24	; 36
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	2f 77       	andi	r18, 0x7F	; 127
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <secret_code>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <secret_code+0x1>
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <secret_code+0x2>
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <secret_code+0x3>
 1b6:	1a 82       	std	Y+2, r1	; 0x02
 1b8:	19 82       	std	Y+1, r1	; 0x01
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <user_code>
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <user_code+0x1>
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <user_code+0x2>
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <user_code+0x3>
 1d2:	8c e4       	ldi	r24, 0x4C	; 76
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 34 02 	call	0x468	; 0x468 <check_secret_code>
 1da:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <mm_result+0x1>
 1de:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <mm_result>
 1e2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <mm_result>
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	49 f4       	brne	.+18     	; 0x1fc <main+0xde>
 1ea:	85 e2       	ldi	r24, 0x25	; 37
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	25 e2       	ldi	r18, 0x25	; 37
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	20 62       	ori	r18, 0x20	; 32
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9a 81       	ldd	r25, Y+2	; 0x02
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <srand>
 20e:	f6 cf       	rjmp	.-20     	; 0x1fc <main+0xde>

00000210 <generateCode>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	0e 94 74 03 	call	0x6e8	; 0x6e8 <rand>
 21c:	27 e0       	ldi	r18, 0x07	; 7
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	b9 01       	movw	r22, r18
 222:	0e 94 00 03 	call	0x600	; 0x600 <__divmodhi4>
 226:	8f 5c       	subi	r24, 0xCF	; 207
 228:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <secret_code>
 22c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <rand>
 230:	27 e0       	ldi	r18, 0x07	; 7
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	0e 94 00 03 	call	0x600	; 0x600 <__divmodhi4>
 23a:	8f 5c       	subi	r24, 0xCF	; 207
 23c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <secret_code+0x1>
 240:	0e 94 74 03 	call	0x6e8	; 0x6e8 <rand>
 244:	27 e0       	ldi	r18, 0x07	; 7
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	0e 94 00 03 	call	0x600	; 0x600 <__divmodhi4>
 24e:	8f 5c       	subi	r24, 0xCF	; 207
 250:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <secret_code+0x2>
 254:	0e 94 74 03 	call	0x6e8	; 0x6e8 <rand>
 258:	27 e0       	ldi	r18, 0x07	; 7
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	b9 01       	movw	r22, r18
 25e:	0e 94 00 03 	call	0x600	; 0x600 <__divmodhi4>
 262:	8f 5c       	subi	r24, 0xCF	; 207
 264:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <secret_code+0x3>
 268:	8a e0       	ldi	r24, 0x0A	; 10
 26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 15 02 	call	0x42a	; 0x42a <TransmitString>
 276:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 27a:	00 00       	nop
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <InitUART>:
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <InitUART+0x6>
 288:	1f 92       	push	r1
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	9b 83       	std	Y+3, r25	; 0x03
 290:	8a 83       	std	Y+2, r24	; 0x02
 292:	85 ec       	ldi	r24, 0xC5	; 197
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2a 81       	ldd	r18, Y+2	; 0x02
 298:	3b 81       	ldd	r19, Y+3	; 0x03
 29a:	23 2f       	mov	r18, r19
 29c:	33 27       	eor	r19, r19
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
 2a2:	84 ec       	ldi	r24, 0xC4	; 196
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	2a 81       	ldd	r18, Y+2	; 0x02
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
 2ac:	81 ec       	ldi	r24, 0xC1	; 193
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	28 e9       	ldi	r18, 0x98	; 152
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
 2b6:	19 82       	std	Y+1, r1	; 0x01
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <UART_RxTail>
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <UART_RxHead>
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <UART_TxTail>
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <UART_TxHead>
 2d0:	00 00       	nop
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <__vector_18>:
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <__vector_18+0x1c>
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	86 ec       	ldi	r24, 0xC6	; 198
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	fc 01       	movw	r30, r24
 304:	80 81       	ld	r24, Z
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <UART_RxHead>
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	8f 71       	andi	r24, 0x1F	; 31
 310:	8a 83       	std	Y+2, r24	; 0x02
 312:	8a 81       	ldd	r24, Y+2	; 0x02
 314:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <UART_RxHead>
 318:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <UART_RxTail>
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	88 5f       	subi	r24, 0xF8	; 248
 324:	9e 4f       	sbci	r25, 0xFE	; 254
 326:	29 81       	ldd	r18, Y+1	; 0x01
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
 32c:	00 00       	nop
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	2f 91       	pop	r18
 340:	0f 90       	pop	r0
 342:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__vector_19>:
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	1f 92       	push	r1
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <UART_TxHead>
 372:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <UART_TxTail>
 376:	98 17       	cp	r25, r24
 378:	a1 f0       	breq	.+40     	; 0x3a2 <__vector_19+0x56>
 37a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <UART_TxTail>
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	8f 71       	andi	r24, 0x1F	; 31
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <UART_TxTail>
 38a:	86 ec       	ldi	r24, 0xC6	; 198
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	29 81       	ldd	r18, Y+1	; 0x01
 390:	22 2f       	mov	r18, r18
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	26 5d       	subi	r18, 0xD6	; 214
 396:	3e 4f       	sbci	r19, 0xFE	; 254
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
 3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <__vector_19+0x68>
 3a2:	81 ec       	ldi	r24, 0xC1	; 193
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	21 ec       	ldi	r18, 0xC1	; 193
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	20 81       	ld	r18, Z
 3ae:	2f 7d       	andi	r18, 0xDF	; 223
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
 3b4:	00 00       	nop
 3b6:	0f 90       	pop	r0
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <TransmitByte>:
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	00 d0       	rcall	.+0      	; 0x3da <TransmitByte+0x6>
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	8a 83       	std	Y+2, r24	; 0x02
 3e0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <UART_TxHead>
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	8f 71       	andi	r24, 0x1F	; 31
 3e8:	89 83       	std	Y+1, r24	; 0x01
 3ea:	00 00       	nop
 3ec:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <UART_TxTail>
 3f0:	99 81       	ldd	r25, Y+1	; 0x01
 3f2:	98 17       	cp	r25, r24
 3f4:	d9 f3       	breq	.-10     	; 0x3ec <TransmitByte+0x18>
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	86 5d       	subi	r24, 0xD6	; 214
 3fe:	9e 4f       	sbci	r25, 0xFE	; 254
 400:	2a 81       	ldd	r18, Y+2	; 0x02
 402:	fc 01       	movw	r30, r24
 404:	20 83       	st	Z, r18
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <UART_TxHead>
 40c:	81 ec       	ldi	r24, 0xC1	; 193
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	21 ec       	ldi	r18, 0xC1	; 193
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	f9 01       	movw	r30, r18
 416:	20 81       	ld	r18, Z
 418:	20 62       	ori	r18, 0x20	; 32
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
 41e:	00 00       	nop
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <TransmitString>:
* transmit a byte via the UART
* - Bytes are transmitted until the terminator
* character '\0' is detected. Then the function returns.
*/
void TransmitString(char *str)
{
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	00 d0       	rcall	.+0      	; 0x430 <TransmitString+0x6>
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	9a 83       	std	Y+2, r25	; 0x02
 436:	89 83       	std	Y+1, r24	; 0x01
	while(*str)
 438:	0b c0       	rjmp	.+22     	; 0x450 <TransmitString+0x26>
	{
		TransmitByte(*str++);
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	9a 81       	ldd	r25, Y+2	; 0x02
 43e:	9c 01       	movw	r18, r24
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	3a 83       	std	Y+2, r19	; 0x02
 446:	29 83       	std	Y+1, r18	; 0x01
 448:	fc 01       	movw	r30, r24
 44a:	80 81       	ld	r24, Z
 44c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <TransmitByte>
* - Bytes are transmitted until the terminator
* character '\0' is detected. Then the function returns.
*/
void TransmitString(char *str)
{
	while(*str)
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	9a 81       	ldd	r25, Y+2	; 0x02
 454:	fc 01       	movw	r30, r24
 456:	80 81       	ld	r24, Z
 458:	88 23       	and	r24, r24
 45a:	79 f7       	brne	.-34     	; 0x43a <TransmitString+0x10>
	{
		TransmitByte(*str++);
	}
}
 45c:	00 00       	nop
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <check_secret_code>:
// Pre     : None of the digits in user_code and secret code is equal to
//           MM_MARK_DONE.
// Post    : -
// ----------------------------------------------------------------------------
mm_result_t check_secret_code(const unsigned char *user_code)
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	60 97       	sbiw	r28, 0x10	; 16
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
 47c:	98 8b       	std	Y+16, r25	; 0x10
 47e:	8f 87       	std	Y+15, r24	; 0x0f
  mm_result_t result;

  // Clear the result
  result.correct_num_and_pos = 0;
 480:	1d 82       	std	Y+5, r1	; 0x05
  result.correct_num = 0;
 482:	1e 82       	std	Y+6, r1	; 0x06

  // Copy the codes
  unsigned char secret_code_tmp[MM_DIGITS];
  unsigned char user_code_tmp[MM_DIGITS];
  for(uint8_t i=0; i < MM_DIGITS; i++)
 484:	19 82       	std	Y+1, r1	; 0x01
 486:	27 c0       	rjmp	.+78     	; 0x4d6 <check_secret_code+0x6e>
  {
    secret_code_tmp[i] = secret_code[i];
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	29 81       	ldd	r18, Y+1	; 0x01
 490:	22 2f       	mov	r18, r18
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	2c 5f       	subi	r18, 0xFC	; 252
 496:	3e 4f       	sbci	r19, 0xFE	; 254
 498:	f9 01       	movw	r30, r18
 49a:	40 81       	ld	r20, Z
 49c:	9e 01       	movw	r18, r28
 49e:	29 5f       	subi	r18, 0xF9	; 249
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	82 0f       	add	r24, r18
 4a4:	93 1f       	adc	r25, r19
 4a6:	fc 01       	movw	r30, r24
 4a8:	40 83       	st	Z, r20
    user_code_tmp[i]   = user_code[i];
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	88 2f       	mov	r24, r24
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	29 81       	ldd	r18, Y+1	; 0x01
 4b2:	22 2f       	mov	r18, r18
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	4f 85       	ldd	r20, Y+15	; 0x0f
 4b8:	58 89       	ldd	r21, Y+16	; 0x10
 4ba:	24 0f       	add	r18, r20
 4bc:	35 1f       	adc	r19, r21
 4be:	f9 01       	movw	r30, r18
 4c0:	40 81       	ld	r20, Z
 4c2:	9e 01       	movw	r18, r28
 4c4:	25 5f       	subi	r18, 0xF5	; 245
 4c6:	3f 4f       	sbci	r19, 0xFF	; 255
 4c8:	82 0f       	add	r24, r18
 4ca:	93 1f       	adc	r25, r19
 4cc:	fc 01       	movw	r30, r24
 4ce:	40 83       	st	Z, r20
  result.correct_num = 0;

  // Copy the codes
  unsigned char secret_code_tmp[MM_DIGITS];
  unsigned char user_code_tmp[MM_DIGITS];
  for(uint8_t i=0; i < MM_DIGITS; i++)
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	89 83       	std	Y+1, r24	; 0x01
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	84 30       	cpi	r24, 0x04	; 4
 4da:	b0 f2       	brcs	.-84     	; 0x488 <check_secret_code+0x20>
    user_code_tmp[i]   = user_code[i];
  }

  // Iteration 1
  // Check the digits that have the same value and the same position
  for(uint8_t i=0; i < MM_DIGITS; i++)
 4dc:	1a 82       	std	Y+2, r1	; 0x02
 4de:	31 c0       	rjmp	.+98     	; 0x542 <check_secret_code+0xda>
  {
    if(user_code[i] == secret_code_tmp[i])
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	2f 85       	ldd	r18, Y+15	; 0x0f
 4e8:	38 89       	ldd	r19, Y+16	; 0x10
 4ea:	82 0f       	add	r24, r18
 4ec:	93 1f       	adc	r25, r19
 4ee:	fc 01       	movw	r30, r24
 4f0:	40 81       	ld	r20, Z
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02
 4f4:	88 2f       	mov	r24, r24
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	9e 01       	movw	r18, r28
 4fa:	29 5f       	subi	r18, 0xF9	; 249
 4fc:	3f 4f       	sbci	r19, 0xFF	; 255
 4fe:	82 0f       	add	r24, r18
 500:	93 1f       	adc	r25, r19
 502:	fc 01       	movw	r30, r24
 504:	80 81       	ld	r24, Z
 506:	48 17       	cp	r20, r24
 508:	c9 f4       	brne	.+50     	; 0x53c <check_secret_code+0xd4>
    {
      // Mark the digits that have been done
      secret_code_tmp[i] = MM_MARK_DONE;
 50a:	8a 81       	ldd	r24, Y+2	; 0x02
 50c:	88 2f       	mov	r24, r24
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	9e 01       	movw	r18, r28
 512:	29 5f       	subi	r18, 0xF9	; 249
 514:	3f 4f       	sbci	r19, 0xFF	; 255
 516:	82 0f       	add	r24, r18
 518:	93 1f       	adc	r25, r19
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
      user_code_tmp[i] = MM_MARK_DONE;
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	88 2f       	mov	r24, r24
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	9e 01       	movw	r18, r28
 528:	25 5f       	subi	r18, 0xF5	; 245
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	82 0f       	add	r24, r18
 52e:	93 1f       	adc	r25, r19
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18

      result.correct_num_and_pos++;
 536:	8d 81       	ldd	r24, Y+5	; 0x05
 538:	8f 5f       	subi	r24, 0xFF	; 255
 53a:	8d 83       	std	Y+5, r24	; 0x05
    user_code_tmp[i]   = user_code[i];
  }

  // Iteration 1
  // Check the digits that have the same value and the same position
  for(uint8_t i=0; i < MM_DIGITS; i++)
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	8f 5f       	subi	r24, 0xFF	; 255
 540:	8a 83       	std	Y+2, r24	; 0x02
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	60 f2       	brcs	.-104    	; 0x4e0 <check_secret_code+0x78>
  }

  // Iteration 2
  // Check the digits that have the same value, but a different position
  // Loop all user digits (u)
  for(uint8_t u=0; u < MM_DIGITS; u++)
 548:	1b 82       	std	Y+3, r1	; 0x03
 54a:	4b c0       	rjmp	.+150    	; 0x5e2 <check_secret_code+0x17a>
  {
    // Has this user digit not been counted in iteration 1?
    if(user_code_tmp[u] != MM_MARK_DONE)
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	88 2f       	mov	r24, r24
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	9e 01       	movw	r18, r28
 554:	25 5f       	subi	r18, 0xF5	; 245
 556:	3f 4f       	sbci	r19, 0xFF	; 255
 558:	82 0f       	add	r24, r18
 55a:	93 1f       	adc	r25, r19
 55c:	fc 01       	movw	r30, r24
 55e:	80 81       	ld	r24, Z
 560:	8f 3f       	cpi	r24, 0xFF	; 255
 562:	e1 f1       	breq	.+120    	; 0x5dc <check_secret_code+0x174>
    {
      // Loop all secret digits (s)
      for(uint8_t s=0; s < MM_DIGITS; s++)
 564:	1c 82       	std	Y+4, r1	; 0x04
 566:	37 c0       	rjmp	.+110    	; 0x5d6 <check_secret_code+0x16e>
      {
        // Has this secret digit not been counted in iteration 1?
        if(secret_code_tmp[s] != MM_MARK_DONE)
 568:	8c 81       	ldd	r24, Y+4	; 0x04
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	9e 01       	movw	r18, r28
 570:	29 5f       	subi	r18, 0xF9	; 249
 572:	3f 4f       	sbci	r19, 0xFF	; 255
 574:	82 0f       	add	r24, r18
 576:	93 1f       	adc	r25, r19
 578:	fc 01       	movw	r30, r24
 57a:	80 81       	ld	r24, Z
 57c:	8f 3f       	cpi	r24, 0xFF	; 255
 57e:	41 f1       	breq	.+80     	; 0x5d0 <check_secret_code+0x168>
        {
          // Are the digits equal and the positions different?
          if((secret_code_tmp[s] == user_code[u]) && (s != u))
 580:	8c 81       	ldd	r24, Y+4	; 0x04
 582:	88 2f       	mov	r24, r24
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	9e 01       	movw	r18, r28
 588:	29 5f       	subi	r18, 0xF9	; 249
 58a:	3f 4f       	sbci	r19, 0xFF	; 255
 58c:	82 0f       	add	r24, r18
 58e:	93 1f       	adc	r25, r19
 590:	fc 01       	movw	r30, r24
 592:	40 81       	ld	r20, Z
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	2f 85       	ldd	r18, Y+15	; 0x0f
 59c:	38 89       	ldd	r19, Y+16	; 0x10
 59e:	82 0f       	add	r24, r18
 5a0:	93 1f       	adc	r25, r19
 5a2:	fc 01       	movw	r30, r24
 5a4:	80 81       	ld	r24, Z
 5a6:	48 17       	cp	r20, r24
 5a8:	99 f4       	brne	.+38     	; 0x5d0 <check_secret_code+0x168>
 5aa:	9c 81       	ldd	r25, Y+4	; 0x04
 5ac:	8b 81       	ldd	r24, Y+3	; 0x03
 5ae:	98 17       	cp	r25, r24
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <check_secret_code+0x168>
          {
            // Mark the secret digit so it will never be equal to a user digit again
            secret_code_tmp[s] = MM_MARK_DONE;
 5b2:	8c 81       	ldd	r24, Y+4	; 0x04
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	9e 01       	movw	r18, r28
 5ba:	29 5f       	subi	r18, 0xF9	; 249
 5bc:	3f 4f       	sbci	r19, 0xFF	; 255
 5be:	82 0f       	add	r24, r18
 5c0:	93 1f       	adc	r25, r19
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	fc 01       	movw	r30, r24
 5c6:	20 83       	st	Z, r18

            result.correct_num++;
 5c8:	8e 81       	ldd	r24, Y+6	; 0x06
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	8e 83       	std	Y+6, r24	; 0x06

            // Do not check the rest of the secret digits for this user digit
            break;
 5ce:	06 c0       	rjmp	.+12     	; 0x5dc <check_secret_code+0x174>
  {
    // Has this user digit not been counted in iteration 1?
    if(user_code_tmp[u] != MM_MARK_DONE)
    {
      // Loop all secret digits (s)
      for(uint8_t s=0; s < MM_DIGITS; s++)
 5d0:	8c 81       	ldd	r24, Y+4	; 0x04
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	8c 83       	std	Y+4, r24	; 0x04
 5d6:	8c 81       	ldd	r24, Y+4	; 0x04
 5d8:	84 30       	cpi	r24, 0x04	; 4
 5da:	30 f2       	brcs	.-116    	; 0x568 <check_secret_code+0x100>
  }

  // Iteration 2
  // Check the digits that have the same value, but a different position
  // Loop all user digits (u)
  for(uint8_t u=0; u < MM_DIGITS; u++)
 5dc:	8b 81       	ldd	r24, Y+3	; 0x03
 5de:	8f 5f       	subi	r24, 0xFF	; 255
 5e0:	8b 83       	std	Y+3, r24	; 0x03
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	84 30       	cpi	r24, 0x04	; 4
 5e6:	08 f4       	brcc	.+2      	; 0x5ea <check_secret_code+0x182>
 5e8:	b1 cf       	rjmp	.-158    	; 0x54c <check_secret_code+0xe4>
        }
      }
    }
  }

  return result;
 5ea:	8d 81       	ldd	r24, Y+5	; 0x05
 5ec:	9e 81       	ldd	r25, Y+6	; 0x06
}
 5ee:	60 96       	adiw	r28, 0x10	; 16
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <__divmodhi4>:
 600:	97 fb       	bst	r25, 7
 602:	07 2e       	mov	r0, r23
 604:	16 f4       	brtc	.+4      	; 0x60a <__divmodhi4+0xa>
 606:	00 94       	com	r0
 608:	07 d0       	rcall	.+14     	; 0x618 <__divmodhi4_neg1>
 60a:	77 fd       	sbrc	r23, 7
 60c:	09 d0       	rcall	.+18     	; 0x620 <__divmodhi4_neg2>
 60e:	0e 94 14 03 	call	0x628	; 0x628 <__udivmodhi4>
 612:	07 fc       	sbrc	r0, 7
 614:	05 d0       	rcall	.+10     	; 0x620 <__divmodhi4_neg2>
 616:	3e f4       	brtc	.+14     	; 0x626 <__divmodhi4_exit>

00000618 <__divmodhi4_neg1>:
 618:	90 95       	com	r25
 61a:	81 95       	neg	r24
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <__divmodhi4_neg2>:
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255

00000626 <__divmodhi4_exit>:
 626:	08 95       	ret

00000628 <__udivmodhi4>:
 628:	aa 1b       	sub	r26, r26
 62a:	bb 1b       	sub	r27, r27
 62c:	51 e1       	ldi	r21, 0x11	; 17
 62e:	07 c0       	rjmp	.+14     	; 0x63e <__udivmodhi4_ep>

00000630 <__udivmodhi4_loop>:
 630:	aa 1f       	adc	r26, r26
 632:	bb 1f       	adc	r27, r27
 634:	a6 17       	cp	r26, r22
 636:	b7 07       	cpc	r27, r23
 638:	10 f0       	brcs	.+4      	; 0x63e <__udivmodhi4_ep>
 63a:	a6 1b       	sub	r26, r22
 63c:	b7 0b       	sbc	r27, r23

0000063e <__udivmodhi4_ep>:
 63e:	88 1f       	adc	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	5a 95       	dec	r21
 644:	a9 f7       	brne	.-22     	; 0x630 <__udivmodhi4_loop>
 646:	80 95       	com	r24
 648:	90 95       	com	r25
 64a:	bc 01       	movw	r22, r24
 64c:	cd 01       	movw	r24, r26
 64e:	08 95       	ret

00000650 <do_rand>:
 650:	8f 92       	push	r8
 652:	9f 92       	push	r9
 654:	af 92       	push	r10
 656:	bf 92       	push	r11
 658:	cf 92       	push	r12
 65a:	df 92       	push	r13
 65c:	ef 92       	push	r14
 65e:	ff 92       	push	r15
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	ec 01       	movw	r28, r24
 666:	68 81       	ld	r22, Y
 668:	79 81       	ldd	r23, Y+1	; 0x01
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	9b 81       	ldd	r25, Y+3	; 0x03
 66e:	61 15       	cp	r22, r1
 670:	71 05       	cpc	r23, r1
 672:	81 05       	cpc	r24, r1
 674:	91 05       	cpc	r25, r1
 676:	21 f4       	brne	.+8      	; 0x680 <do_rand+0x30>
 678:	64 e2       	ldi	r22, 0x24	; 36
 67a:	79 ed       	ldi	r23, 0xD9	; 217
 67c:	8b e5       	ldi	r24, 0x5B	; 91
 67e:	97 e0       	ldi	r25, 0x07	; 7
 680:	2d e1       	ldi	r18, 0x1D	; 29
 682:	33 ef       	ldi	r19, 0xF3	; 243
 684:	41 e0       	ldi	r20, 0x01	; 1
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	0e 94 84 03 	call	0x708	; 0x708 <__divmodsi4>
 68c:	49 01       	movw	r8, r18
 68e:	5a 01       	movw	r10, r20
 690:	9b 01       	movw	r18, r22
 692:	ac 01       	movw	r20, r24
 694:	a7 ea       	ldi	r26, 0xA7	; 167
 696:	b1 e4       	ldi	r27, 0x41	; 65
 698:	0e 94 a3 03 	call	0x746	; 0x746 <__muluhisi3>
 69c:	6b 01       	movw	r12, r22
 69e:	7c 01       	movw	r14, r24
 6a0:	ac ee       	ldi	r26, 0xEC	; 236
 6a2:	b4 ef       	ldi	r27, 0xF4	; 244
 6a4:	a5 01       	movw	r20, r10
 6a6:	94 01       	movw	r18, r8
 6a8:	0e 94 b1 03 	call	0x762	; 0x762 <__mulohisi3>
 6ac:	dc 01       	movw	r26, r24
 6ae:	cb 01       	movw	r24, r22
 6b0:	8c 0d       	add	r24, r12
 6b2:	9d 1d       	adc	r25, r13
 6b4:	ae 1d       	adc	r26, r14
 6b6:	bf 1d       	adc	r27, r15
 6b8:	b7 ff       	sbrs	r27, 7
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <do_rand+0x72>
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	a1 09       	sbc	r26, r1
 6c0:	b0 48       	sbci	r27, 0x80	; 128
 6c2:	88 83       	st	Y, r24
 6c4:	99 83       	std	Y+1, r25	; 0x01
 6c6:	aa 83       	std	Y+2, r26	; 0x02
 6c8:	bb 83       	std	Y+3, r27	; 0x03
 6ca:	9f 77       	andi	r25, 0x7F	; 127
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	bf 90       	pop	r11
 6da:	af 90       	pop	r10
 6dc:	9f 90       	pop	r9
 6de:	8f 90       	pop	r8
 6e0:	08 95       	ret

000006e2 <rand_r>:
 6e2:	0e 94 28 03 	call	0x650	; 0x650 <do_rand>
 6e6:	08 95       	ret

000006e8 <rand>:
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	0e 94 28 03 	call	0x650	; 0x650 <do_rand>
 6f0:	08 95       	ret

000006f2 <srand>:
 6f2:	a0 e0       	ldi	r26, 0x00	; 0
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 6fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 6fe:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 702:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 706:	08 95       	ret

00000708 <__divmodsi4>:
 708:	05 2e       	mov	r0, r21
 70a:	97 fb       	bst	r25, 7
 70c:	1e f4       	brtc	.+6      	; 0x714 <__divmodsi4+0xc>
 70e:	00 94       	com	r0
 710:	0e 94 9b 03 	call	0x736	; 0x736 <__negsi2>
 714:	57 fd       	sbrc	r21, 7
 716:	07 d0       	rcall	.+14     	; 0x726 <__divmodsi4_neg2>
 718:	0e 94 b6 03 	call	0x76c	; 0x76c <__udivmodsi4>
 71c:	07 fc       	sbrc	r0, 7
 71e:	03 d0       	rcall	.+6      	; 0x726 <__divmodsi4_neg2>
 720:	4e f4       	brtc	.+18     	; 0x734 <__divmodsi4_exit>
 722:	0c 94 9b 03 	jmp	0x736	; 0x736 <__negsi2>

00000726 <__divmodsi4_neg2>:
 726:	50 95       	com	r21
 728:	40 95       	com	r20
 72a:	30 95       	com	r19
 72c:	21 95       	neg	r18
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	4f 4f       	sbci	r20, 0xFF	; 255
 732:	5f 4f       	sbci	r21, 0xFF	; 255

00000734 <__divmodsi4_exit>:
 734:	08 95       	ret

00000736 <__negsi2>:
 736:	90 95       	com	r25
 738:	80 95       	com	r24
 73a:	70 95       	com	r23
 73c:	61 95       	neg	r22
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	08 95       	ret

00000746 <__muluhisi3>:
 746:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__umulhisi3>
 74a:	a5 9f       	mul	r26, r21
 74c:	90 0d       	add	r25, r0
 74e:	b4 9f       	mul	r27, r20
 750:	90 0d       	add	r25, r0
 752:	a4 9f       	mul	r26, r20
 754:	80 0d       	add	r24, r0
 756:	91 1d       	adc	r25, r1
 758:	11 24       	eor	r1, r1
 75a:	08 95       	ret

0000075c <__mulshisi3>:
 75c:	b7 ff       	sbrs	r27, 7
 75e:	0c 94 a3 03 	jmp	0x746	; 0x746 <__muluhisi3>

00000762 <__mulohisi3>:
 762:	0e 94 a3 03 	call	0x746	; 0x746 <__muluhisi3>
 766:	82 1b       	sub	r24, r18
 768:	93 0b       	sbc	r25, r19
 76a:	08 95       	ret

0000076c <__udivmodsi4>:
 76c:	a1 e2       	ldi	r26, 0x21	; 33
 76e:	1a 2e       	mov	r1, r26
 770:	aa 1b       	sub	r26, r26
 772:	bb 1b       	sub	r27, r27
 774:	fd 01       	movw	r30, r26
 776:	0d c0       	rjmp	.+26     	; 0x792 <__udivmodsi4_ep>

00000778 <__udivmodsi4_loop>:
 778:	aa 1f       	adc	r26, r26
 77a:	bb 1f       	adc	r27, r27
 77c:	ee 1f       	adc	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	a2 17       	cp	r26, r18
 782:	b3 07       	cpc	r27, r19
 784:	e4 07       	cpc	r30, r20
 786:	f5 07       	cpc	r31, r21
 788:	20 f0       	brcs	.+8      	; 0x792 <__udivmodsi4_ep>
 78a:	a2 1b       	sub	r26, r18
 78c:	b3 0b       	sbc	r27, r19
 78e:	e4 0b       	sbc	r30, r20
 790:	f5 0b       	sbc	r31, r21

00000792 <__udivmodsi4_ep>:
 792:	66 1f       	adc	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	1a 94       	dec	r1
 79c:	69 f7       	brne	.-38     	; 0x778 <__udivmodsi4_loop>
 79e:	60 95       	com	r22
 7a0:	70 95       	com	r23
 7a2:	80 95       	com	r24
 7a4:	90 95       	com	r25
 7a6:	9b 01       	movw	r18, r22
 7a8:	ac 01       	movw	r20, r24
 7aa:	bd 01       	movw	r22, r26
 7ac:	cf 01       	movw	r24, r30
 7ae:	08 95       	ret

000007b0 <__umulhisi3>:
 7b0:	a2 9f       	mul	r26, r18
 7b2:	b0 01       	movw	r22, r0
 7b4:	b3 9f       	mul	r27, r19
 7b6:	c0 01       	movw	r24, r0
 7b8:	a3 9f       	mul	r26, r19
 7ba:	70 0d       	add	r23, r0
 7bc:	81 1d       	adc	r24, r1
 7be:	11 24       	eor	r1, r1
 7c0:	91 1d       	adc	r25, r1
 7c2:	b2 9f       	mul	r27, r18
 7c4:	70 0d       	add	r23, r0
 7c6:	81 1d       	adc	r24, r1
 7c8:	11 24       	eor	r1, r1
 7ca:	91 1d       	adc	r25, r1
 7cc:	08 95       	ret

000007ce <_exit>:
 7ce:	f8 94       	cli

000007d0 <__stop_program>:
 7d0:	ff cf       	rjmp	.-2      	; 0x7d0 <__stop_program>
